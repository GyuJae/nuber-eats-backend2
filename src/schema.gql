# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type DishChoice {
  name: String!
  extra: Float
}

type DishOption {
  name: String!
  choices: [DishChoice!]
  extra: Float
}

type Dish {
  name: String!
  price: Float!
  photo: String
  description: String!
  restaurant: Restaurant!
  options: [DishOption!]
}

type OrderItemOption {
  name: String!
  choice: String
}

type OrderItem {
  dish: Dish!
  options: [OrderItemOption!]
}

type Order {
  customer: User
  driver: User
  restaurant: Restaurant
  items: [OrderItem!]!
  total: Float
  status: OrderStatus!
}

enum OrderStatus {
  Pending
  Cooking
  Cooked
  PickedUp
  Delivered
}

type Category {
  name: String!
  coverImg: String
  slug: String!
  restaurants: [Restaurant!]
  restaurantCount: Float!
}

type Restaurant {
  name: String!
  coverImg: String!
  address: String!
  category: Category
  owner: User!
  menu: [Dish!]!
  orders: [Order!]!
}

type User {
  email: String!
  password: String!
  role: UserRole!
  verified: Boolean!
  restaurants: [Restaurant!]!
  orders: [Order!]
  rides: [Order!]!
}

enum UserRole {
  Client
  Owner
  Delivery
}

type CreateAccountOutput {
  ok: Boolean!
  error: String
}

type EditProfileOutput {
  ok: Boolean!
  error: String
}

type LoginOutput {
  ok: Boolean!
  error: String
  token: String
}

type UserProfileOutput {
  ok: Boolean!
  error: String
  user: User
}

type VerifyEmailOutput {
  ok: Boolean!
  error: String
}

type AllCategoriesOutput {
  ok: Boolean!
  error: String
  categories: [Category!]
}

type CategoryOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  totalResults: Float
  restaurants: [Restaurant!]
  category: Category
}

type CreateRestaurantOutput {
  ok: Boolean!
  error: String
}

type DeleteRestaurantOutput {
  ok: Boolean!
  error: String
}

type EditRestaurantOutput {
  ok: Boolean!
  error: String
}

type AllRestaurantsOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  totalResults: Float
  results: [Restaurant!]
}

type RestaurantOutput {
  ok: Boolean!
  error: String
  restaurant: Restaurant
}

type SearchRestaurantOutput {
  ok: Boolean!
  error: String
  totalPages: Float
  totalResults: Float
  restaurants: [Restaurant!]
}

type CreateDishOutput {
  ok: Boolean!
  error: String
}

type DeleteDishOutput {
  ok: Boolean!
  error: String
}

type CreateOrderOutput {
  ok: Boolean!
  error: String
}

type EditOrderOutput {
  ok: Boolean!
  error: String
}

type GetOrdersOutput {
  ok: Boolean!
  error: String
  orders: [Order!]
}

type Query {
  me: User!
  userProfile(input: UserProfileInput!): UserProfileOutput!
  findRestaurantById(input: RestaurantInput!): RestaurantOutput!
  searchRestaurants(input: SearchRestaurantInput!): SearchRestaurantOutput!
  allCategories: AllCategoriesOutput!
  category(input: CategoryInput!): CategoryOutput!
  allRestaurants(input: AllRestaurantsInput!): AllRestaurantsOutput!
  getOrders(input: GetOrdersInput!): GetOrdersOutput!
  getOrder(input: GetOrderInput!): GetOrdersOutput!
}

input UserProfileInput {
  userId: Float!
}

input RestaurantInput {
  restaurantId: Float!
}

input SearchRestaurantInput {
  page: Float = 1
  query: String!
}

input CategoryInput {
  page: Float = 1
  slug: String!
}

input AllRestaurantsInput {
  page: Float = 1
}

input GetOrdersInput {
  status: OrderStatus
}

input GetOrderInput {
  orderId: Int!
}

type Mutation {
  createAccount(input: CreateAccountInput!): CreateAccountOutput!
  login(input: LoginInput!): LoginOutput!
  editProfile(input: EditProfileInput!): EditProfileOutput!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailOutput!
  createRestaurant(input: CreateRestaurantInput!): CreateRestaurantOutput!
  editRestaurant(input: EditRestaurantInput!): EditRestaurantOutput!
  deleteRestaurant(input: DeleteRestaurantInput!): DeleteRestaurantOutput!
  createDish(input: CreateDishInput!): CreateDishOutput!
  deleteDish(input: DeleteDishInput!): DeleteDishOutput!
  editDish(input: EditDishInput!): DeleteDishOutput!
  createOrder(input: CreateOrderInput!): CreateOrderOutput!
  editOrder(input: EditOrderInput!): EditOrderOutput!
}

input CreateAccountInput {
  email: String!
  password: String!
  role: UserRole!
}

input LoginInput {
  email: String!
  password: String!
}

input EditProfileInput {
  email: String
  password: String
}

input VerifyEmailInput {
  code: String!
}

input CreateRestaurantInput {
  name: String!
  coverImg: String!
  address: String!
  categoryName: String!
}

input EditRestaurantInput {
  name: String
  coverImg: String
  address: String
  categoryName: String
  restaurantId: Float!
}

input DeleteRestaurantInput {
  restaurantId: Float!
}

input CreateDishInput {
  name: String!
  price: Float!
  description: String!
  options: [DishOptionInputType!]
  restaurantId: Float!
}

input DishOptionInputType {
  name: String!
  choices: [DishChoiceInputType!]
  extra: Float
}

input DishChoiceInputType {
  name: String!
  extra: Float
}

input DeleteDishInput {
  dishId: Float!
}

input EditDishInput {
  name: String
  price: Float
  description: String
  options: [DishOptionInputType!]
  dishId: Float!
}

input CreateOrderInput {
  restaurantId: Float!
  items: [CreateOrderItemInput!]!
}

input CreateOrderItemInput {
  dishId: Int!
  options: [OrderItemOptionInputType!]
}

input OrderItemOptionInputType {
  name: String!
  choice: String
}

input EditOrderInput {
  status: OrderStatus!
  id: Int!
}

type Subscription {
  pendingOrders: Order!
  cookedOrders: Order!
}
